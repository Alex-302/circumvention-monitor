#! /usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const consola = require('consola');
const packageJson = require('../package.json');
const monitor = require('./monitor');

// eslint-disable-next-line import/order
const { argv } = require('yargs')
    .usage('Usage: $0 [options]')
    .example('$0 -c conf/configuration.json -o rules.txt -r report.md',
        'monitor configured websites and write the rules to "rules.txt", and report to "report.md"')
    .option('config', {
        alias: 'c',
        type: 'string',
        description: 'Path to the compiler configuration file',
        nargs: 1,
    })
    .option('output', {
        alias: 'o',
        type: 'string',
        description: 'Path to the file with rules generated by the monitor',
        nargs: 1,
    })
    .option('report', {
        alias: 'r',
        type: 'string',
        description: 'Path to the file with a report',
        nargs: 1,
    })
    .option('system', {
        alias: 's',
        type: 'string',
        description: 'Name of thee ad system (if you want to run it for a single system)',
        nargs: 1,
    })
    .option('verbose', {
        alias: 'v',
        type: 'boolean',
        description: 'Run with verbose logging',
    })
    .demandOption(['c', 'o', 'r'])
    .version()
    .help('h')
    .alias('h', 'help');

if (argv.verbose) {
    // trace level
    consola.level = 5;
}

/**
 * Entry point
 */
async function main() {
    try {
        // Check if file exists
        await fs.access(argv.config);

        consola.info(`Starting ${packageJson.name} v${packageJson.version}`);

        const configStr = (await fs.readFile(argv.config)).toString();
        let config = JSON.parse(configStr);
        if (argv.system) {
            consola.info(`Running for system ${argv.system}`);
            config = {
                // Keep only the specified system
                observe: config.observe.filter((s) => s.name === argv.system),
            };
        }

        // Create output directories
        let dir = path.dirname(argv.report);
        await fs.mkdir(dir, { recursive: true });
        dir = path.dirname(argv.output);
        await fs.mkdir(dir, { recursive: true });

        // Run the monitor
        const report = await monitor(config);

        consola.info(`Writing report to ${argv.report}`);
        await fs.writeFile(argv.report, report.build());

        consola.info(`Writing rules to ${argv.output}`);
        await fs.writeFile(argv.output, report.buildRules().join('\n'));

        consola.info(`Finished ${packageJson.name}`);
    } catch (ex) {
        consola.error(`Unexpected error: ${ex}`);
        process.exit(1);
    }
}

main();
